import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'twoArrays' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY A
     *  3. INTEGER_ARRAY B
     */

    public static String twoArrays(long k, List<Long> A, List<Long> B) {
        long [] arr = new long [A.size()];
        boolean v = true;
        for(int i=0; i<B.size(); i++){
              v=true;
              long[]min = new long[2];
              
              min[0]=Long.MAX_VALUE;
            for(int j=0; j<B.size(); j++){
                if((A.get(i)+B.get(j))>=k&&arr[j]!=1){
                    if(min[0]>B.get(j)&&v==false){
                        min[0]=B.get(j);
                        arr[(int)min[1]]=0;
                        arr[j]=1;
                        min[1]=j;
                        
                    }
                    if(v==true){
                        min[0]=B.get(j);
                        min[1]=j;
                        arr[j]=1;
                    }
                    v=false;
                    
                    
                }
            }
            
            
          
            
            if(v==true){
                break;
            }
        }
        if(v!=true){
            return "YES";
        }
        else{
            return "NO";
        }

    }
    

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int n = Integer.parseInt(firstMultipleInput[0]);

                long k = Long.parseLong(firstMultipleInput[1]);

                List<Long> A = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Long::parseLong)
                    .collect(toList());

                List<Long> B = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Long::parseLong)
                    .collect(toList());

                String result = Result.twoArrays(k, A, B);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
