'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'queensAttack' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER k
 *  3. INTEGER r_q
 *  4. INTEGER c_q
 *  5. 2D_INTEGER_ARRAY obstacles
 */

function queensAttack(n, k, r, co, obst) {
    // Write your code here
    let obs={};
    for(let x of obst){
        let str="";
        str+=x[0];
        str+=" ";
        str+=x[1];
        obs[str]=1;
    }
    let c=0;
        let i=r;
        let j=co;
        
        
        while(i<n){
            
            i++;
            let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
            
            c++;
        }
         i=r;
         j=co;
         
        while(i>1){
            i--;
            let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
       
            c++;
        }
        i=r;
         j=co;
         
          while(j<n){
              j++;
            let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
            
            c++;
        }
        i=r;
         j=co;
         
        while(j>1){
            j--;
           let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
          
            c++;
        }
        i=r;
        j=co;
        
        while(i<n&&j<n){
            i++;
            j++;
           let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
            
            c++;
        }
        i=r;
        j=co;
        
        while(i<n&&j>1){
            i++;
            j--;
           let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
           
            c++;
        }
        i=r;
        j=co;
        
        while(i>1&&j<n){
            i--;
            j++;
           let list = [];
            list.push(i);
            list.push(j);
            
            if(obs[includesMultiDimension(list)]!=undefined){
                
                break;
            }
           
            c++;
        }
        i=r;
        j=co;
        
        while(i>1&&j>1){
            i--;
            j--;
          let list = [];
            list.push(i);
            list.push(j);
            if(obs[includesMultiDimension(list)]!=undefined){
                break;
            }
            
            c++;
        }
        return c;
}
function includesMultiDimension(list){
    return list[0]+" "+list[1];
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

    const n = parseInt(firstMultipleInput[0], 10);

    const k = parseInt(firstMultipleInput[1], 10);

    const secondMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

    const r_q = parseInt(secondMultipleInput[0], 10);

    const c_q = parseInt(secondMultipleInput[1], 10);

    let obstacles = Array(k);

    for (let i = 0; i < k; i++) {
        obstacles[i] = readLine().replace(/\s+$/g, '').split(' ').map(obstaclesTemp => parseInt(obstaclesTemp, 10));
    }

    const result = queensAttack(n, k, r_q, c_q, obstacles);

    ws.write(result + '\n');

    ws.end();
}
