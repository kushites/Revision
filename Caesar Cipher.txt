import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'caesarCipher' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER k
     */

    public static String caesarCipher(String s, int k) {
        HashMap<String, Integer> letters = new HashMap<>();
        HashMap<Integer, String> letbyv = new HashMap<>();
        String al = "abcdefghijklmnopqrstuvwxyz";
        for(int i=1; i<=26; i++){
            letters.put(String.valueOf(al.charAt(i-1)),i);
            letbyv.put(i,String.valueOf(al.charAt(i-1)));
        }
        String [] arr = s.split("");
       
        for(int i=0; i<arr.length; i++){
            
            boolean isbig= false;
            if((s.charAt(i)>=65&&s.charAt(i)<=90)||(s.charAt(i)>=97&&s.charAt(i)<=122)){
                if(arr[i].equals(arr[i].toUpperCase())){
                    isbig=true;
                }
                int val=0;
               if(isbig){
                  val= letters.get(arr[i].toLowerCase());
               }
               else{
                   val = letters.get(arr[i]);
               }
            
            int calval = (val+k)%26;
            if(calval==0){
                calval=26;
            }
            String key = letbyv.get(calval);
            if(isbig){
                key = key.toUpperCase();
            }
            arr[i]=key;
             
            }
        }
        String ans ="";
        for(String val :arr){
            ans+=val;
        }
        return ans;
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String s = bufferedReader.readLine().trim();

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        String result = Result.caesarCipher(s, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
